
                /*This file is generated by the preprocessor*/ 
                #pragma once
                
                
                #include"pparse.h"
                #include "aassetmanager.h"
                
                struct MetaDataEntry{
                u32 type_hash;
                u32 name_hash;
                s8 type_string[128];
                s8 name_string[128];
                u32 size;
                u32 offset;
                u32 arraycount;
                // for referencing other components to access.
                u32 ref_metadatacomp_index; 
                };
                
                struct MetaDataStructEntry{
                u32 element_size;
                s8 comp_name_string[128];
                u32 comp_name_hash;
                MetaDataEntry* metadata_table;
                u32 metadata_count;
                };
                
                enum CType{
                CType_U8 = PHashString("u8"),
                CType_U16 = PHashString("u16"),
                CType_U32 = PHashString("u32"),
                CType_U64 = PHashString("u64"),
                CType_S8 = PHashString("s8"),
                CType_S16 = PHashString("s16"),
                CType_S32 = PHashString("s32"),
                CType_S64 = PHashString("s64"),
                CType_LOGIC = PHashString("logic"),
                CType_F32 = PHashString("f32"),
                CType_F64 = PHashString("f64"),
                CType_PTRSIZE = PHashString("ptrsize"),
                CType_VOID = PHashString("void"),
                CType_STRUCT,
                };
                
                

_persist MetaDataEntry EntityAnimationData_META_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(EntityAnimationData,id),1,(u32)-1},
{(u32)8035783,(u32)358616,"AnimationID","animdata_id",(u32)sizeof(AnimationID),(u32)offsetof(EntityAnimationData,animdata_id),1,(u32)-1},
{(u32)11688,(u32)13693461,"u16","animationindex",(u32)sizeof(u16),(u32)offsetof(EntityAnimationData,animationindex),1,(u32)-1},
{(u32)11688,(u32)1149457,"u16","islooping",(u32)sizeof(u16),(u32)offsetof(EntityAnimationData,islooping),1,(u32)-1},
{(u32)4753,(u32)6382439,"f32","animationtime",(u32)sizeof(f32),(u32)offsetof(EntityAnimationData,animationtime),1,(u32)-1},
{(u32)4753,(u32)114023,"f32","speed",(u32)sizeof(f32),(u32)offsetof(EntityAnimationData,speed),1,(u32)-1},
};

_persist MetaDataEntry EntityDrawData_META_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(EntityDrawData,id),1,(u32)-1},
{(u32)377568,(u32)88048,"ModelID","model",(u32)sizeof(ModelID),(u32)offsetof(EntityDrawData,model),1,(u32)-1},
{(u32)421387,(u32)101812,"MaterialID","material",(u32)sizeof(MaterialID),(u32)offsetof(EntityDrawData,material),1,(u32)-1},
{(u32)241635364,(u32)46885,"RenderGroupIndex","group",(u32)sizeof(RenderGroupIndex),(u32)offsetof(EntityDrawData,group),1,(u32)-1},
};

_persist MetaDataEntry EntityAudioData_META_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(EntityAudioData,id),1,(u32)-1},
{(u32)81069624,(u32)298334,"AudioAssetHandle","audioasset",(u32)sizeof(AudioAssetHandle),(u32)offsetof(EntityAudioData,audioasset),1,(u32)-1},
{(u32)11688,(u32)1149457,"u16","islooping",(u32)sizeof(u16),(u32)offsetof(EntityAudioData,islooping),1,(u32)-1},
{(u32)11688,(u32)947865,"u16","toremove",(u32)sizeof(u16),(u32)offsetof(EntityAudioData,toremove),1,(u32)-1},
};

_persist MetaDataEntry PointLight_META_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(PointLight,id),1,(u32)-1},
{(u32)4753,(u32)3479,"f32","R",(u32)sizeof(f32),(u32)offsetof(PointLight,R),1,(u32)-1},
{(u32)4753,(u32)2900,"f32","G",(u32)sizeof(f32),(u32)offsetof(PointLight,G),1,(u32)-1},
{(u32)4753,(u32)1271,"f32","B",(u32)sizeof(f32),(u32)offsetof(PointLight,B),1,(u32)-1},
{(u32)4753,(u32)26417,"f32","radius",(u32)sizeof(f32),(u32)offsetof(PointLight,radius),1,(u32)-1},
{(u32)4753,(u32)2062714,"f32","intensity",(u32)sizeof(f32),(u32)offsetof(PointLight,intensity),1,(u32)-1},
};

_persist MetaDataEntry SpotLight_META_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(SpotLight,id),1,(u32)-1},
{(u32)4753,(u32)3479,"f32","R",(u32)sizeof(f32),(u32)offsetof(SpotLight,R),1,(u32)-1},
{(u32)4753,(u32)2900,"f32","G",(u32)sizeof(f32),(u32)offsetof(SpotLight,G),1,(u32)-1},
{(u32)4753,(u32)1271,"f32","B",(u32)sizeof(f32),(u32)offsetof(SpotLight,B),1,(u32)-1},
{(u32)4753,(u32)86075,"f32","dir_x",(u32)sizeof(f32),(u32)offsetof(SpotLight,dir_x),1,(u32)-1},
{(u32)4753,(u32)85772,"f32","dir_y",(u32)sizeof(f32),(u32)offsetof(SpotLight,dir_y),1,(u32)-1},
{(u32)4753,(u32)85911,"f32","dir_z",(u32)sizeof(f32),(u32)offsetof(SpotLight,dir_z),1,(u32)-1},
{(u32)4753,(u32)3047467,"f32","full_angle",(u32)sizeof(f32),(u32)offsetof(SpotLight,full_angle),1,(u32)-1},
{(u32)4753,(u32)163611,"f32","hard_angle",(u32)sizeof(f32),(u32)offsetof(SpotLight,hard_angle),1,(u32)-1},
{(u32)4753,(u32)26417,"f32","radius",(u32)sizeof(f32),(u32)offsetof(SpotLight,radius),1,(u32)-1},
{(u32)4753,(u32)2062714,"f32","intensity",(u32)sizeof(f32),(u32)offsetof(SpotLight,intensity),1,(u32)-1},
};


MetaDataStructEntry META_STRUCT_ARRAY[] = {
{sizeof(EntityAnimationData),"EntityAnimationData",(u32)196420554,&EntityAnimationData_META_STRUCT[0],_arraycount(EntityAnimationData_META_STRUCT)},
{sizeof(EntityDrawData),"EntityDrawData",(u32)6895340,&EntityDrawData_META_STRUCT[0],_arraycount(EntityDrawData_META_STRUCT)},
{sizeof(EntityAudioData),"EntityAudioData",(u32)11188350,&EntityAudioData_META_STRUCT[0],_arraycount(EntityAudioData_META_STRUCT)},
{sizeof(PointLight),"PointLight",(u32)2976236,&PointLight_META_STRUCT[0],_arraycount(PointLight_META_STRUCT)},
{sizeof(SpotLight),"SpotLight",(u32)1145704,&SpotLight_META_STRUCT[0],_arraycount(SpotLight_META_STRUCT)},

};

    
  MetaDataStructEntry* MetaGetStructByNameHash(u32 hash){
  
  for(u32 i = 0; i < _arraycount(META_STRUCT_ARRAY); i++){
  auto entry = &META_STRUCT_ARRAY[i];
  
  if(hash == entry->comp_name_hash){
  return entry;
  }
  
  }
  
  return 0;
  }
  
  MetaDataStructEntry* MetaGetStructByName(const s8* name){
  return MetaGetStructByNameHash(PHashString(name));
  }
  
  u32 MetaGetTypeByNameHash(u32 hash,MetaDataEntry* array,
  u32 array_count){
  
  for(u32 i = 0; i < array_count; i++){
  MetaDataEntry* entry = &array[i];
  if(entry->name_hash == hash){
  return entry->type_hash;
  }
  }
  return (u32)-1;
  }
  
  
  u32 MetaGetTypeByName(const s8* name,MetaDataEntry* array,
  u32 array_count){
  
  return MetaGetTypeByNameHash(PHashString(name),array,array_count);
  }
  
  
  logic MetaGetValueByNameHash(void* obj,u32 index,void* outdata,u32 hash,MetaDataEntry* array,
  u32 array_count){
  
  for(u32 i = 0; i < array_count; i++){
  MetaDataEntry* entry = &array[i];
  if(entry->name_hash == hash){
  
  _kill("index exceeds arraycount\n",index >= entry->arraycount);
  
  auto data = (s8*)obj;
  memcpy(outdata,data + entry->offset + (entry->size * index),entry->size);
  return true;
  }
  }
  
  return false;
  }
  
  logic MetaGetValueByName(void* obj,u32 index,void* outdata,const s8* name,MetaDataEntry* array,
  u32 array_count){
  
  return MetaGetValueByNameHash(obj,index,outdata,PHashString(name),array,array_count);
  }
  
  logic MetaSetValueByNameHash(void* obj,u32 index,void* value,u32 hash,MetaDataEntry* array,
  u32 array_count){
  
  for(u32 i = 0; i < array_count; i++){
  
  MetaDataEntry* entry = &array[i];
  
  if(entry->name_hash == hash){
  
  _kill("index exceeds arraycount\n",index >= entry->arraycount);
  
  
  auto data = (s8*)obj;
  memcpy(data + entry->offset + (entry->size * index),value,entry->size);
  return true;
  }
  }
  
  return false;
  }
  
  logic MetaSetValueByName(void* obj,u32 index,void* value,const s8* name,MetaDataEntry* array,
  u32 array_count){
  
  return MetaSetValueByNameHash(obj,index,value,PHashString(name),array,array_count);
  }
  
  logic MetaIsCType(u32 hash){
  return hash == CType_U8 || hash == CType_U16 || hash == CType_U32  || hash == CType_U64 ||
  hash == CType_S8 || hash == CType_S16 || hash == CType_S32 || hash == CType_S64 ||
  hash == CType_LOGIC || hash == CType_F32 || hash == CType_F64 || hash == CType_PTRSIZE ||
  hash == CType_VOID;
  }
  
  logic MetaIsCType(const s8* string){
  return MetaIsCType(PHashString(string));
  }
  
  u32 _ainline MetaStringToType(const s8* string){
  return PHashString(string);
  }
  
  logic IsIntType(u32 type){
  
  return type == CType_U8 ||
          type == CType_U16 ||
          type == CType_U32 ||
          type == CType_U64 ||
          type == CType_S8||
          type == CType_S16||
          type == CType_S32||
          type == CType_S64;
  }
  
  logic IsFloatType(u32 type){
  return type == CType_F32 ||
        type == CType_F64;
  }
  
  
  