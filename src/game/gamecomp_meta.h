
  /*This file is generated by the preprocessor*/ 
  #pragma once
  #include"pparse.h"
  #include "aassetmanager.h"
  
  struct MetaDataEntry{
  u32 type_hash;
  u32 name_hash;
  s8 type_string[128];
  s8 name_string[128];
  u32 size;
  u32 offset;
  u32 arraycount;
  // for referencing other components to access.
  u32 ref_metadatacomp_index; 
  };
  
  struct MetaDataCompEntry{
  u32 array; //offset to component array
  u32 count;//offset to component count
  u32 element_size;
  s8 comp_name_string[128];
  u32 comp_name_hash;
  MetaDataEntry* metadata_table;
  u32 metadata_count;
  };
  
  enum CType{
  CType_U8 = PHashString("u8"),
  CType_U16 = PHashString("u16"),
  CType_U32 = PHashString("u32"),
  CType_U64 = PHashString("u64"),
  CType_S8 = PHashString("s8"),
  CType_S16 = PHashString("s16"),
  CType_S32 = PHashString("s32"),
  CType_S64 = PHashString("s64"),
  CType_LOGIC = PHashString("logic"),
  CType_F32 = PHashString("f32"),
  CType_F64 = PHashString("f64"),
  CType_PTRSIZE = PHashString("ptrsize"),
  CType_VOID = PHashString("void"),
  CType_STRUCT,
  };
  
  #define _component_count 200
  
  

struct ComponentStruct{


EntityAnimationData entityanimationdata_array[_component_count];
u32 entityanimationdata_count = 0;



EntityDrawData entitydrawdata_array[_component_count];
u32 entitydrawdata_count = 0;



EntityAudioData entityaudiodata_array[_component_count];
u32 entityaudiodata_count = 0;



PointLight pointlight_array[_component_count];
u32 pointlight_count = 0;



SpotLight spotlight_array[_component_count];
u32 spotlight_count = 0;

};



_persist MetaDataEntry EntityAnimationData_METACOMP_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(EntityAnimationData,id),1,(u32)-1},
{(u32)8035783,(u32)358616,"AnimationID","animdata_id",(u32)sizeof(AnimationID),(u32)offsetof(EntityAnimationData,animdata_id),1,(u32)-1},
{(u32)11688,(u32)13693461,"u16","animationindex",(u32)sizeof(u16),(u32)offsetof(EntityAnimationData,animationindex),1,(u32)-1},
{(u32)11688,(u32)1149457,"u16","islooping",(u32)sizeof(u16),(u32)offsetof(EntityAnimationData,islooping),1,(u32)-1},
{(u32)4753,(u32)6382439,"f32","animationtime",(u32)sizeof(f32),(u32)offsetof(EntityAnimationData,animationtime),1,(u32)-1},
{(u32)4753,(u32)114023,"f32","speed",(u32)sizeof(f32),(u32)offsetof(EntityAnimationData,speed),1,(u32)-1},
};

_persist MetaDataEntry EntityDrawData_METACOMP_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(EntityDrawData,id),1,(u32)-1},
{(u32)377568,(u32)88048,"ModelID","model",(u32)sizeof(ModelID),(u32)offsetof(EntityDrawData,model),1,(u32)-1},
{(u32)421387,(u32)101812,"MaterialID","material",(u32)sizeof(MaterialID),(u32)offsetof(EntityDrawData,material),1,(u32)-1},
{(u32)241635364,(u32)46885,"RenderGroupIndex","group",(u32)sizeof(RenderGroupIndex),(u32)offsetof(EntityDrawData,group),1,(u32)-1},
};

_persist MetaDataEntry EntityAudioData_METACOMP_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(EntityAudioData,id),1,(u32)-1},
{(u32)81069624,(u32)298334,"AudioAssetHandle","audioasset",(u32)sizeof(AudioAssetHandle),(u32)offsetof(EntityAudioData,audioasset),1,(u32)-1},
{(u32)11688,(u32)1149457,"u16","islooping",(u32)sizeof(u16),(u32)offsetof(EntityAudioData,islooping),1,(u32)-1},
{(u32)11688,(u32)947865,"u16","toremove",(u32)sizeof(u16),(u32)offsetof(EntityAudioData,toremove),1,(u32)-1},
};

_persist MetaDataEntry PointLight_METACOMP_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(PointLight,id),1,(u32)-1},
{(u32)4753,(u32)3479,"f32","R",(u32)sizeof(f32),(u32)offsetof(PointLight,R),1,(u32)-1},
{(u32)4753,(u32)2900,"f32","G",(u32)sizeof(f32),(u32)offsetof(PointLight,G),1,(u32)-1},
{(u32)4753,(u32)1271,"f32","B",(u32)sizeof(f32),(u32)offsetof(PointLight,B),1,(u32)-1},
{(u32)4753,(u32)26417,"f32","radius",(u32)sizeof(f32),(u32)offsetof(PointLight,radius),1,(u32)-1},
{(u32)4753,(u32)2062714,"f32","intensity",(u32)sizeof(f32),(u32)offsetof(PointLight,intensity),1,(u32)-1},
};

_persist MetaDataEntry SpotLight_METACOMP_STRUCT[] = {
{(u32)83011,(u32)7787,"ObjectID","id",(u32)sizeof(ObjectID),(u32)offsetof(SpotLight,id),1,(u32)-1},
{(u32)4753,(u32)3479,"f32","R",(u32)sizeof(f32),(u32)offsetof(SpotLight,R),1,(u32)-1},
{(u32)4753,(u32)2900,"f32","G",(u32)sizeof(f32),(u32)offsetof(SpotLight,G),1,(u32)-1},
{(u32)4753,(u32)1271,"f32","B",(u32)sizeof(f32),(u32)offsetof(SpotLight,B),1,(u32)-1},
{(u32)4753,(u32)86075,"f32","dir_x",(u32)sizeof(f32),(u32)offsetof(SpotLight,dir_x),1,(u32)-1},
{(u32)4753,(u32)85772,"f32","dir_y",(u32)sizeof(f32),(u32)offsetof(SpotLight,dir_y),1,(u32)-1},
{(u32)4753,(u32)85911,"f32","dir_z",(u32)sizeof(f32),(u32)offsetof(SpotLight,dir_z),1,(u32)-1},
{(u32)4753,(u32)3047467,"f32","full_angle",(u32)sizeof(f32),(u32)offsetof(SpotLight,full_angle),1,(u32)-1},
{(u32)4753,(u32)163611,"f32","hard_angle",(u32)sizeof(f32),(u32)offsetof(SpotLight,hard_angle),1,(u32)-1},
{(u32)4753,(u32)26417,"f32","radius",(u32)sizeof(f32),(u32)offsetof(SpotLight,radius),1,(u32)-1},
{(u32)4753,(u32)2062714,"f32","intensity",(u32)sizeof(f32),(u32)offsetof(SpotLight,intensity),1,(u32)-1},
};


MetaDataCompEntry METACOMP_ARRAY[] = {
{offsetof(ComponentStruct,entityanimationdata_array),offsetof(ComponentStruct,entityanimationdata_count),sizeof(ComponentStruct::entityanimationdata_array[0]),"EntityAnimationData",(u32)196420554,&EntityAnimationData_METACOMP_STRUCT[0],_arraycount(EntityAnimationData_METACOMP_STRUCT)},
{offsetof(ComponentStruct,entitydrawdata_array),offsetof(ComponentStruct,entitydrawdata_count),sizeof(ComponentStruct::entitydrawdata_array[0]),"EntityDrawData",(u32)6895340,&EntityDrawData_METACOMP_STRUCT[0],_arraycount(EntityDrawData_METACOMP_STRUCT)},
{offsetof(ComponentStruct,entityaudiodata_array),offsetof(ComponentStruct,entityaudiodata_count),sizeof(ComponentStruct::entityaudiodata_array[0]),"EntityAudioData",(u32)11188350,&EntityAudioData_METACOMP_STRUCT[0],_arraycount(EntityAudioData_METACOMP_STRUCT)},
{offsetof(ComponentStruct,pointlight_array),offsetof(ComponentStruct,pointlight_count),sizeof(ComponentStruct::pointlight_array[0]),"PointLight",(u32)2976236,&PointLight_METACOMP_STRUCT[0],_arraycount(PointLight_METACOMP_STRUCT)},
{offsetof(ComponentStruct,spotlight_array),offsetof(ComponentStruct,spotlight_count),sizeof(ComponentStruct::spotlight_array[0]),"SpotLight",(u32)1145704,&SpotLight_METACOMP_STRUCT[0],_arraycount(SpotLight_METACOMP_STRUCT)},

};

    
  struct MetaDataCompOut{
  s8* array; //array ptr
  u32* count;// ptr to array count
  u32 element_size;
  const s8* comp_name_string;
  u32 comp_name_hash;
  MetaDataEntry* metadata_table;
  u32 metadata_count;
  };
  
  MetaDataCompOut GetComponentData(ComponentStruct* components,
  MetaDataCompEntry metacomp){
  
  auto data = (s8*)components;
  
  MetaDataCompOut output = 
  {(data + metacomp.array),(u32*)(data + metacomp.count),metacomp.element_size,
  metacomp.comp_name_string,metacomp.comp_name_hash,metacomp.metadata_table,
  metacomp.metadata_count};
  
  return output;
  }
  
  MetaDataCompEntry* MetaGetCompByNameHash(u32 hash){
  
  for(u32 i = 0; i < _arraycount(METACOMP_ARRAY); i++){
  auto entry = &METACOMP_ARRAY[i];
  
  if(hash == entry->comp_name_hash){
  return entry;
  }
  
  }
  
  return 0;
  }
  
  MetaDataCompEntry* MetaGetCompByNameHash(const s8* name){
  return MetaGetCompByNameHash(PHashString(name));
  }
  
  u32 MetaGetTypeByNameHash(u32 hash,MetaDataEntry* array,
  u32 array_count){
  
  for(u32 i = 0; i < array_count; i++){
  MetaDataEntry* entry = &array[i];
  if(entry->name_hash == hash){
  return entry->type_hash;
  }
  }
  return (u32)-1;
  }
  
  
  u32 MetaGetTypeByName(const s8* name,MetaDataEntry* array,
  u32 array_count){
  
  return MetaGetTypeByNameHash(PHashString(name),array,array_count);
  }
  
  
  logic MetaGetValueByNameHash(void* obj,u32 index,void* outdata,u32 hash,MetaDataEntry* array,
  u32 array_count){
  
  for(u32 i = 0; i < array_count; i++){
  MetaDataEntry* entry = &array[i];
  if(entry->name_hash == hash){
  
  _kill("index exceeds arraycount\n",index >= entry->arraycount);
  
  auto data = (s8*)obj;
  memcpy(outdata,data + entry->offset + (entry->size * index),entry->size);
  return true;
  }
  }
  
  return false;
  }
  
  logic MetaGetValueByName(void* obj,u32 index,void* outdata,const s8* name,MetaDataEntry* array,
  u32 array_count){
  
  return MetaGetValueByNameHash(obj,index,outdata,PHashString(name),array,array_count);
  }
  
  logic MetaSetValueByNameHash(void* obj,u32 index,void* value,u32 hash,MetaDataEntry* array,
  u32 array_count){
  
  for(u32 i = 0; i < array_count; i++){
  
  MetaDataEntry* entry = &array[i];
  
  if(entry->name_hash == hash){
  
  _kill("index exceeds arraycount\n",index >= entry->arraycount);
  
  
  auto data = (s8*)obj;
  memcpy(data + entry->offset + (entry->size * index),value,entry->size);
  return true;
  }
  }
  
  return false;
  }
  
  logic MetaSetValueByName(void* obj,u32 index,void* value,const s8* name,MetaDataEntry* array,
  u32 array_count){
  
  return MetaSetValueByNameHash(obj,index,value,PHashString(name),array,array_count);
  }
  
  logic MetaIsCType(u32 hash){
  return hash == CType_U8 || hash == CType_U16 || hash == CType_U32  || hash == CType_U64 ||
  hash == CType_S8 || hash == CType_S16 || hash == CType_S32 || hash == CType_S64 ||
  hash == CType_LOGIC || hash == CType_F32 || hash == CType_F64 || hash == CType_PTRSIZE ||
  hash == CType_VOID;
  }
  
  logic MetaIsCType(const s8* string){
  return MetaIsCType(PHashString(string));
  }
  
  u32 _ainline MetaStringToType(const s8* string){
  return PHashString(string);
  }
  
  logic IsIntType(u32 type){
  
  return type == CType_U8 ||
          type == CType_U16 ||
          type == CType_U32 ||
          type == CType_U64 ||
          type == CType_S8||
          type == CType_S16||
          type == CType_S32||
          type == CType_S64;
  }
  
  logic IsFloatType(u32 type){
  return type == CType_F32 ||
        type == CType_F64;
  }
  
  
  void MetaDumpComponents(ComponentStruct* compstruct){
  
    auto metacomp_array = &METACOMP_ARRAY[0];
    u32 metacomp_count = _arraycount(METACOMP_ARRAY);
    
    for(u32 i = 0; i < metacomp_count; i++){
    
      printf("--COMPTYPE--\n");
      
      auto entry = metacomp_array[i];
      
      auto outdata = GetComponentData(compstruct,entry);
      
      auto array = outdata.array;
      auto count = *outdata.count;
      
      for(u32 j = 0; j < count; j++){
      
        printf("--COMP--\n");
        
        auto comp_entry_data = array + (j * outdata.element_size);
        
        for(u32 k = 0; k < outdata.metadata_count; k++){
        
   auto comp_meta_entry = outdata.metadata_table[k];
   
   printf("%s %s : ",comp_meta_entry.type_string,comp_meta_entry.name_string);
   
   for(u32 k = 0; k < comp_meta_entry.arraycount; k++){
   
   s8 buffer[256] = {};
   
   MetaGetValueByName(comp_entry_data,k,&buffer[0],comp_meta_entry.name_string,
        outdata.metadata_table,outdata.metadata_count);
        
   if(
      comp_meta_entry.type_hash == CType_U8 ||
      comp_meta_entry.type_hash == CType_U16 ||
      comp_meta_entry.type_hash == CType_U32 ||
      comp_meta_entry.type_hash == CType_U64 ||
      comp_meta_entry.type_hash == CType_S8||
      comp_meta_entry.type_hash == CType_S16||
      comp_meta_entry.type_hash == CType_S32||
      comp_meta_entry.type_hash == CType_S64
      ){
     printf("%d\n",*((u32*)(&buffer[0])));
   }
   
   else if(comp_meta_entry.type_hash == CType_F32 ||
    comp_meta_entry.type_hash == CType_F64){
     printf("%f\n",*((f32*)(&buffer[0])));
   }
   
   else{
     printf("%d\n",*((u32*)(&buffer[0])));
   }
   
}

        }
        
      }
      
    }
    
  }
  
  void MetaDump(){
  
    for(u32 i = 0; i < _arraycount(METACOMP_ARRAY); i++){
    
      auto meta_comp = &METACOMP_ARRAY[i];
      
      printf("\nCOMP: %s\n",meta_comp->comp_name_string);
      
      for(u32 j = 0; j < meta_comp->metadata_count; j++){
      
        auto field_entry = &meta_comp->metadata_table[j];
        
        printf("%s %s\n",field_entry->type_string,field_entry->name_string);
      }
      
    }
    
  }
  
  
  