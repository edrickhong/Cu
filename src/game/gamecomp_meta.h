
                
                /*This file is generated by the preprocessor*/ 
                #pragma once
                
                #include "meta.h"
                
                struct MetaDataCompEntry{
                u32 array; //offset to component array
                u32 count;//offset to component count
                u32 element_size;
                s8 comp_name_string[128];
                u32 comp_name_hash;
                MetaDataEntry* metadata_table;
                u32 metadata_count;
                };
                
                #define _component_count 200
                
                

struct ComponentStruct{


EntityAnimationData entityanimationdata_array[_component_count];
u32 entityanimationdata_count = 0;



EntityDrawData entitydrawdata_array[_component_count];
u32 entitydrawdata_count = 0;



EntityAudioData entityaudiodata_array[_component_count];
u32 entityaudiodata_count = 0;



PointLight pointlight_array[_component_count];
u32 pointlight_count = 0;



SpotLight spotlight_array[_component_count];
u32 spotlight_count = 0;

};




MetaDataCompEntry METACOMP_ARRAY[] = {
{offsetof(ComponentStruct,entityanimationdata_array),offsetof(ComponentStruct,entityanimationdata_count),sizeof(ComponentStruct::entityanimationdata_array[0]),"EntityAnimationData",(u32)196420554,&EntityAnimationData_META_STRUCT[0],_arraycount(EntityAnimationData_META_STRUCT)},
{offsetof(ComponentStruct,entitydrawdata_array),offsetof(ComponentStruct,entitydrawdata_count),sizeof(ComponentStruct::entitydrawdata_array[0]),"EntityDrawData",(u32)6895340,&EntityDrawData_META_STRUCT[0],_arraycount(EntityDrawData_META_STRUCT)},
{offsetof(ComponentStruct,entityaudiodata_array),offsetof(ComponentStruct,entityaudiodata_count),sizeof(ComponentStruct::entityaudiodata_array[0]),"EntityAudioData",(u32)11188350,&EntityAudioData_META_STRUCT[0],_arraycount(EntityAudioData_META_STRUCT)},
{offsetof(ComponentStruct,pointlight_array),offsetof(ComponentStruct,pointlight_count),sizeof(ComponentStruct::pointlight_array[0]),"PointLight",(u32)2976236,&PointLight_META_STRUCT[0],_arraycount(PointLight_META_STRUCT)},
{offsetof(ComponentStruct,spotlight_array),offsetof(ComponentStruct,spotlight_count),sizeof(ComponentStruct::spotlight_array[0]),"SpotLight",(u32)1145704,&SpotLight_META_STRUCT[0],_arraycount(SpotLight_META_STRUCT)},

};

    
    struct MetaDataCompOut{
  s8* array; //array ptr
  u32* count;// ptr to array count
  u32 element_size;
  const s8* comp_name_string;
  u32 comp_name_hash;
  MetaDataEntry* metadata_table;
  u32 metadata_count;
  };
  
    MetaDataCompOut GetComponentData(ComponentStruct* components,
  MetaDataCompEntry metacomp){
  
  auto data = (s8*)components;
  
  MetaDataCompOut output = 
  {(data + metacomp.array),(u32*)(data + metacomp.count),metacomp.element_size,
  metacomp.comp_name_string,metacomp.comp_name_hash,metacomp.metadata_table,
  metacomp.metadata_count};
  
  return output;
  }
  
      MetaDataCompEntry* MetaGetCompByNameHash(u32 hash){
      
  for(u32 i = 0; i < _arraycount(METACOMP_ARRAY); i++){
  auto entry = &METACOMP_ARRAY[i];
  
  if(hash == entry->comp_name_hash){
  return entry;
  }
  
  }
  
  return 0;
  }
  
  MetaDataCompEntry* MetaGetCompByName(const s8* name){
  return MetaGetCompByNameHash(PHashString(name));
  }
  
  void MetaDumpComponents(ComponentStruct* compstruct){
  
    auto metacomp_array = &METACOMP_ARRAY[0];
    u32 metacomp_count = _arraycount(METACOMP_ARRAY);
    
    for(u32 i = 0; i < metacomp_count; i++){
    
      printf("--COMPTYPE--\n");
      
      auto entry = metacomp_array[i];
      
      auto outdata = GetComponentData(compstruct,entry);
      
      auto array = outdata.array;
      auto count = *outdata.count;
      
      for(u32 j = 0; j < count; j++){
      
        printf("--COMP--\n");
        
        auto comp_entry_data = array + (j * outdata.element_size);
        
        for(u32 k = 0; k < outdata.metadata_count; k++){
        
   auto comp_meta_entry = outdata.metadata_table[k];
   
   printf("%s %s : ",comp_meta_entry.type_string,comp_meta_entry.name_string);
   
   for(u32 k = 0; k < comp_meta_entry.arraycount; k++){
   
   s8 buffer[256] = {};
   
   MetaGetValueByName(comp_entry_data,k,&buffer[0],comp_meta_entry.name_string,
        outdata.metadata_table,outdata.metadata_count);
        
   if(
      comp_meta_entry.type_hash == CType_U8 ||
      comp_meta_entry.type_hash == CType_U16 ||
      comp_meta_entry.type_hash == CType_U32 ||
      comp_meta_entry.type_hash == CType_U64 ||
      comp_meta_entry.type_hash == CType_S8||
      comp_meta_entry.type_hash == CType_S16||
      comp_meta_entry.type_hash == CType_S32||
      comp_meta_entry.type_hash == CType_S64
      ){
     printf("%d\n",*((u32*)(&buffer[0])));
   }
   
   else if(comp_meta_entry.type_hash == CType_F32 ||
    comp_meta_entry.type_hash == CType_F64){
     printf("%f\n",*((f32*)(&buffer[0])));
   }
   
   else{
     printf("%d\n",*((u32*)(&buffer[0])));
   }
   
}

        }
        
      }
      
    }
    
  }
  
  void MetaDump(){
  
    for(u32 i = 0; i < _arraycount(METACOMP_ARRAY); i++){
    
      auto meta_comp = &METACOMP_ARRAY[i];
      
      printf("\nCOMP: %s\n",meta_comp->comp_name_string);
      
      for(u32 j = 0; j < meta_comp->metadata_count; j++){
      
        auto field_entry = &meta_comp->metadata_table[j];
        
        printf("%s %s\n",field_entry->type_string,field_entry->name_string);
      }
      
    }
    
  }
  
  