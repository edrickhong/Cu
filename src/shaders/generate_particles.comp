layout(constant_id = 0) const  uint max_emitters = 16;
layout(constant_id = 1) const  uint max_particles = 2048;

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct ParticleEmitterInfo{
	vec4 pos;
	float timer;
	float freq;
};

struct ParticleInfo{
	vec4 pos;
	vec4 dir;
	float lifetime;
};

layout (set = 0, binding = 0) buffer Emitter{
	ParticleEmitterInfo emitters[max_emitters];
	uint emitter_use[max_emitters];
	uint particle_count;
	float time;
	uint tri_count;
} emitter;

layout (set = 0, binding = 1) buffer Particle{
	ParticleInfo particles[max_particles];
} particle;

#if 0

layout (set = 1, binding = 0) buffer Vert{
	vec4 verts[max_particles * 4];
} vert;


layout (set = 1, binding = 1) buffer Ind{
	uint indices[max_particles * 6];
} ind;

#endif





float Random(vec2 co){
	return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 RandomVec3(vec2 co){
	return vec3(Random(co),Random(co.yx * 3.142),Random(co.yx * 0.142));
}




void main(){
	uint particle_index = gl_GlobalInvocationID.x;
	uint emitter_index = gl_LocalInvocationID.x;

	if(particle.particles[particle_index].lifetime > 0){
		particle.particles[particle_index].pos += particle.particles[particle_index].dir;
		particle.particles[particle_index].lifetime -= emitter.time;

		//TODO: fill vertex buffer and index buffer
	}

	else if(emitter.emitter_use[emitter_index] == 0){

		uint emitter_use = emitter.emitter_use[emitter_index];
		uint actual = atomicCompSwap(emitter.emitter_use[emitter_index],emitter_use, emitter_use + 1);

#if 0

		float timer = emitter.emitters[emitter_index].timer;
		float freq = emitter.emitters[emitter_index].timer;

		if(emitter_use == actual){
			if(timer > freq){
				//particle.particles[particle_index].pos ;
				vec3 pos = emitter.emitters[emitter_index].pos + RandomVec3(vec2(gl_GlobalInvocationID.x,gl_LocalInvocationID.x));
				vec3 dir = RandomVec3(vec2(gl_LocalInvocationID.x,gl_GlobalInvocationID.x));
				float lifetime = abs(Random(vec2(pos.x,dir.z)));

				particle.particles[particle_index].pos = pos;
				particle.particles[particle_index].dir = dir;
				particle.particles[particle_index].lifetime = lifetime;
				emitter.emitters[emitter_index].timer = 0;
			}
			emitter.emitters[emitter_index].timer += emitter.time;
		}

#endif


	}

}
